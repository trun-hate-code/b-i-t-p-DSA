#include <iostream>
#include <algorithm>

using namespace std;

struct Node
{
	int value;
	Node *next; // *link
};

void init(Node *&head) {
	head = NULL;
}

Node* createdNode(int x) {
	Node *p = new Node;
	p->value = x;
	p->next = NULL;
	return p;
}

void addFirst(Node *&head, int x) {
	Node *p = createdNode(x);
	p->next = head;
	head = p;
}

void addLast(Node *&head, int x) {
	Node *p = createdNode(x);
		Node *last = head;
		while (last->next != NULL) {
			last = last->next;
		}
		last->next = p;
}

void addAfter(Node *&head, int v, int x) {
	Node *p = createdNode(x);

	// timn node co gia tri v
	Node *q = head;

	while (q != NULL && q->value != v) {
		q = q->next; 
	}
	if (q != NULL) {
		p->next = q->next;
		q->next = p;
	}
}

void deleteFirst(Node *&head) {
	if (head != NULL)
	{
		Node *p = head;
		head = p->next;
		p->next = NULL;
		delete(p);
	}
}

void deleteLast(Node *&head) {
	if (head != NULL) {
		Node *last = head;
		Node *prev = NULL;
		while (last->next = NULL) {
			prev = last;
			last = last->next;
		}
	if (prev == NULL) {
			deleteFirst(prev);
	}
		else {
			prev->next = NULL;
			delete(last);
		}
	}
}

void deleteNode(Node *&head, int v) {
	if (head != NULL) {
		Node *p = head;
		Node *prev = NULL;
		while (p != NULL && p->value != v) {
			prev = p;
			p = p->next;
		}
		if (p != NULL)
		{
			if (prev == NULL) {
				deleteFirst(prev);
			}
			else {
				prev->next = p->next;
				p->next = NULL;
				delete(p);
			}
		}
	}
}

void output(Node *head) {
	Node *p = head;
	while (p != NULL) {
		cout << p->value << " ";
		p = p->next;
	}
	cout << endl;
}

void clean(Node *&head) {
	while (head != NULL) {
		deleteFirst(head);
	}
}


int main() {
	Node *head;
	init(head);
	addFirst(head, 10);
	addFirst(head, 20);
	addFirst(head, 15);
	output(head);
	deleteNode(head, 20);
	output(head);
	clean(head);
	output(head);
	system("pause");
	return 0;
}
